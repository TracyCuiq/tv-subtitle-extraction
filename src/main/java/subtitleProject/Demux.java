package subtitleProject;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import dk.statsbiblioteket.util.console.ProcessRunner;

public class Demux {
	private static Logger log = LoggerFactory.getLogger(SubtitleProject.class);
	/**
	 * USing ProjectX to demux transportStream so .son files will be generated
	 * @param properties
	 * @param file
	 * @return
	 * @throws IOException
	 */
	public static HashMap<String, ArrayList<SubtitleFragment>> DemuxFile(ResourceLinks resources, File file) throws IOException{
		HashMap<String, File> sonFiles = new HashMap<String, File>();
		log.debug("Running commandline: "+"projectx -ini "+resources.getProjectXconfig() + " -log -demux "+file.getAbsolutePath());
		ProcessRunner pr = new ProcessRunner("bash","-c","projectx -ini "+resources.getProjectXconfig() + " -log -demux "+file.getAbsolutePath());
		pr.run();
		//String StringOutput = pr.getProcessOutputAsString();
		//String StringError = pr.getProcessErrorAsString();
		//log.debug(StringOutput);
		//log.debug(StringError);
		String iniName = file.getName().replaceFirst("\\.ts$", "_log.txt");
		File projectXLog = new File(resources.getOutput() +iniName);
		log.debug("ProjectX log: "+projectXLog.getAbsoluteFile());
		BufferedReader reader = null;
		reader = new BufferedReader(new InputStreamReader(new FileInputStream(projectXLog), "UTF-8"));
		ArrayList<String> pids = new ArrayList<String>();
		String line;
		while ((line = reader.readLine()) != null)
		{
			if(line.contains("Subpict.:")){
				line = reader.readLine();
				while(line.startsWith("PID")){
					String[] splitsplit = line.split(" ");
					String temp = splitsplit[1];
					splitsplit =temp.split("x");
					temp = splitsplit[1];
					Pattern p = Pattern.compile("^(.*?)\\(");
					Matcher m = p.matcher(line);
					while (m.find()) {
						temp = m.group(1);
					}
					while(!temp.startsWith("0")){
						temp = temp.substring(1);
					}
					pids.add(temp);
					line = reader.readLine();
				}
//				String pidTemp[] = line.split(" ");
//				String pid = pidTemp[3];
//				String[] pidSplit = pid.split("x");
//				int pidint = Integer.parseInt(pidSplit[pidSplit.length-2]);
//				pid = pidSplit[0]+"x"+pidint;
				//boolean found = false;
				int i = 0;
				while(i<pids.size()){
					line = reader.readLine();
					if(line.endsWith(".son")){
						String[] temp = line.split(" ");					
						sonFiles.put(pids.get(i) ,new File(temp[temp.length-1]));
						i++;
						log.debug("found .son: "+temp[temp.length-1]);
						//found = true;
					}
				}
			}
		}
		reader.close();
		projectXLog.delete();
		
		HashMap<String, ArrayList<SubtitleFragment>> subsToPids = SONHandler.sonHandler(sonFiles, resources);
		Iterator<String> it = sonFiles.keySet().iterator();
		while(it.hasNext()){
			removeUselessFiles(sonFiles.get(it.next()));
		}
		return subsToPids;
	}

	/**
	 * Removes files which is generated by ProjectX
	 * @param son
	 */
	private static void removeUselessFiles(File son){
		String supName = son.getAbsolutePath().replaceFirst("\\.son$", ".sup");
		String spfName = son.getAbsolutePath().replaceFirst("\\.son$", ".spf");
		String ifoName = son.getAbsolutePath().replaceFirst("\\.son$", ".sup.IFO");
		File f = new File(supName);
		if(f!=null){
			log.debug(""+f.delete());
		}
		f = new File(spfName);
		if(f!=null){
			log.debug(""+f.delete());
		}
		f = new File(ifoName);
		if(f!=null){
			log.debug(""+f.delete());
		}
		son.delete();
	}
}
