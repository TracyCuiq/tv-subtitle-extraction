package subtitleProject.subtitleStream;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import subtitleProject.SubtitleProject;
import subtitleProject.common.ResourceLinks;
import subtitleProject.common.SubtitleFragment;
import dk.statsbiblioteket.util.console.ProcessRunner;

/**
 * Class to Demux transportStream. External software, ProjectX, tries to detect subtitleStream.
 * If detected, .son file is extracted along with every subtitle as .bmp file.
 */
public class Demux {
	private static Logger log = LoggerFactory.getLogger(SubtitleProject.class);
	/**
	 * Using ProjectX to demux transportStream so .son files will be generated
	 * @param properties
	 * @param file to demux
	 * @return a list of SubtitleFragments linked to the associated pid
	 * @throws IOException if sonfiles doesn't exist
	 */
	public static Map<String, List<SubtitleFragment>> DemuxFile(ResourceLinks resources, File file) throws IOException{
		Map<String, File> sonFiles = new HashMap<String, File>();
		String commandeLine = resources.getProjectx()+" -ini "+resources.getProjectXconfig() + " -log -demux "+file.getAbsolutePath();
		log.debug("Running commandline: {}",commandeLine);
		ProcessRunner pr = new ProcessRunner("bash","-c",commandeLine);
		pr.run();
		//String StringOutput = pr.getProcessOutputAsString();
		//String StringError = pr.getProcessErrorAsString();
		//log.debug(StringOutput);
		//log.debug(StringError);
		detectPids(resources, file, sonFiles);

		Map<String, List<SubtitleFragment>> subsToPids = SONHandler.sonHandler(sonFiles, resources);
		Iterator<String> it = sonFiles.keySet().iterator();
		while(it.hasNext()){
			removeUselessFiles(sonFiles.get(it.next()));
		}
		return subsToPids;
	}

	/**
	 * Iterate through log file to detect if there is valid output
	 * @param resources
	 * @param file there has been demuxed
	 * @param sonFiles projectedX has generated
	 * @throws UnsupportedEncodingException if UTF-8 is unsupported
	 * @throws FileNotFoundException if log file hsn't been generated
	 * @throws IOException if log file hsn't been generated
	 */
	private static void detectPids(ResourceLinks resources, File file,
			Map<String, File> sonFiles)
					throws UnsupportedEncodingException, FileNotFoundException,
					IOException {
		String iniName = file.getName().replaceFirst("\\.ts$", "_log.txt");
		File projectXLog = new File(resources.getOutput() +iniName);
		//log.debug("ProjectX log: "+projectXLog.getAbsoluteFile());

		try(BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(projectXLog), "UTF-8"))){
			List<String> pids = new ArrayList<String>();
			String line;
			while ((line = reader.readLine()) != null)
			{
				if(line.contains("Subpict.:")){
					line = reader.readLine();
					while(line.startsWith("PID")){
						String[] splitsplit = line.split(" ");
						String temp = splitsplit[1];
						splitsplit =temp.split("x");
						temp = splitsplit[1];
						Pattern p = Pattern.compile("^(.*?)\\(");
						Matcher m = p.matcher(line);
						while (m.find()) {
							temp = m.group(1);
						}
						while(!temp.startsWith("0")){
							temp = temp.substring(1);
						}
						pids.add(temp);
						line = reader.readLine();
					}
					int i = 0;
					while(i<pids.size()){
						line = reader.readLine();
						if(line.endsWith(".son")){
							String[] temp = line.split(" ");					
							sonFiles.put(pids.get(i) ,new File(temp[temp.length-1]));
							i++;
							log.debug("found .son: {}",temp[temp.length-1]);
							//found = true;
						}
					}
				}
			}
		}
		projectXLog.delete();
	}

	/**
	 * Removes files which is generated by ProjectX
	 * @param son
	 */
	private static void removeUselessFiles(File son){
		String supName = son.getAbsolutePath().replaceFirst("\\.son$", ".sup");
		String spfName = son.getAbsolutePath().replaceFirst("\\.son$", ".spf");
		String ifoName = son.getAbsolutePath().replaceFirst("\\.son$", ".sup.IFO");
		File f = new File(supName);
		if(f!=null){
			log.debug(""+f.delete());
		}
		f = new File(spfName);
		if(f!=null){
			log.debug(""+f.delete());
		}
		f = new File(ifoName);
		if(f!=null){
			log.debug(""+f.delete());
		}
		son.delete();
	}
}
